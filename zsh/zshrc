if [[ -d "/usr/share/oh-my-zsh/" ]];then
    ZSH=/usr/share/oh-my-zsh/
    export DISABLE_AUTO_UPDATE="true"
else
    ZSH=~/.oh-my-zsh/
    export DISABLE_AUTO_UPDATE="false"
fi

function unsetproxy() {
    unset ALL_PROXY
    unset HTTP_PROXY
    unset HTTPS_PROXY
    unset all_proxy
    unset http_proxy
    unset https_proxy
}
function setproxy() {
    unsetproxy

    ## determine proxy port
    PROXY_PORT=8899
    if checkport 7890; then
        export PROXY_PORT=7890
    elif checkport 8899; then
        export PROXY_PORT=8899
    fi

    ## determine proxy host
    if [[ -v WSL_INTEROP ]]; then
        hostip=$(grep nameserver /etc/resolv.conf | awk '{ print $2 }')
        export PROXY_HOST=${hostip}
        echo "proxy wsl: ${PROXY_HOST}:${PROXY_PORT} "
    else
        export PROXY_HOST="127.0.0.1"
        echo "proxy local: ${PROXY_HOST}:${PROXY_PORT} "
    fi

    export ALL_PROXY="socks5://${PROXY_HOST}:${PROXY_PORT}"
    export HTTP_PROXY="http://${PROXY_HOST}:${PROXY_PORT}"
    export HTTPS_PROXY="http://${PROXY_HOST}:${PROXY_PORT}"
}
function proxyinfo() {
    echo "ALL_PROXY = ${ALL_PROXY}"
    echo "HTTP_PROXY = ${HTTP_PROXY}"
    echo "HTTPS_PROXY = ${HTTPS_PROXY}"
}
function checkport() {
    lsof -Pi :"$1" -sTCP:LISTEN -t >/dev/null
}

# turn on proxy by default
setproxy

# for gradle proxy setting
export GRADLE_OPTS="-Dhttp.proxyHost=${PROXY_HOST} -Dhttp.proxyPort=${PROXY_PORT} \
  -Dhttps.proxyHost=${PROXY_HOST} -Dhttps.proxyPort=${PROXY_PORT} \
  -Dhttp.nonProxyHosts=*.nonproxyrepos.com|localhost"

case $(uname) in
    Darwin)
        ZSH_THEME="robbyrussell"
        source ~/.zshenv
        alias vim='mvim -v'
        SCCACHE_WRAPPER="/opt/homebrew/bin/sccache"
        export HOMEBREW_NO_AUTO_UPDATE=1
        if [[ $(command -v podman) != *"podman"* ]]; then
            alias docker="podman"
        fi
    ;;
    Linux)
        ZSH_THEME="gentoo"
        export GTK_IM_MODULE=fcitx
        export QT_IM_MODULE=fcitx
        export XMODIFIERS="@im=fcitx"
        alias gvim='gvim -c "call Maximize_Window()"'
        alias unzipp='unzip -O cp936'
        SCCACHE_WRAPPER="/usr/bin/sccache"
        # wsl only config
        if [[ -v WSL_INTEROP ]]; then
            SCCACHE_WRAPPER="${HOME}/.cargo/bin/sccache"
        fi
    ;;
    *)
    ;;
esac

# podman machine init
# podman machine set --rootful
# podman machine start
# podman machine stop

plugins=(git golang rust common-aliases sdk brew gnu-utils colorize aliases python fd)

alias mvalidate="mvn validate -U"
alias mdeploy='mvn clean deploy -Dmaven.test.skip=true'
alias mtree='mvn clean dependency:tree -U'
alias msource='mvn dependency:sources'

export JAVA_TOOL_OPTIONS="-Dfile.encoding=UTF-8 -Duser.language=en"
MVN=mvn
if [[ $(command -v mvnd) ]]; then
    MVN=mvnd
fi
alias mqc='${MVN} compile --offline'
alias mcc='${MVN} clean compile -U'
alias mcco='${MVN} clean compile -U --offline'
alias mqt='${MVN} test -DfailIfNoTests=false --offline'
alias mtt='${MVN} clean test -U -DfailIfNoTests=false'
alias mtto='${MVN} clean test -U -DfailIfNoTests=false --offline'

alias myip="curl myip.ipip.net"
alias yay="paru"

export LC_MESSAGES="en_US.UTF-8"
export EDITOR='vim'

if [[ -f ${SCCACHE_WRAPPER} ]]; then
    export RUSTC_WRAPPER="${SCCACHE_WRAPPER}"
fi

export SDKMAN_DIR="${HOME}/.sdkman"
export SDKMAN_JDK8="8.0.352-amzn"
export SDKMAN_JDK11="11.0.17-amzn"
export SDKMAN_JDK17="17.0.5-amzn"

if [[ -s "${SDKMAN_DIR}/bin/sdkman-init.sh" ]]; then
    source "${SDKMAN_DIR}/bin/sdkman-init.sh"
    # sdk offline enable
    function usejdk8() {
        sdk use java "${SDKMAN_JDK8}"
    }
    function usejdk11() {
        sdk use java "${SDKMAN_JDK11}"
    }
    function usejdk17() {
        sdk use java "${SDKMAN_JDK17}"
    }
    function gradle_wrapper_jdk8() {
        usejdk8
        gradle wrapper --gradle-version 4.2.1
    }
fi
function init_sdkman() {
    curl -s "https://get.sdkman.io" | bash
    sdk install java "${SDKMAN_JDK8}"
    sdk install java "${SDKMAN_JDK11}"
    sdk install java "${SDKMAN_JDK17}"
    sdk list java
    sdk current java
}

BREW_BIN="/opt/homebrew/bin/brew"
if [[ -f ${BREW_BIN} ]]; then
    eval "$(${BREW_BIN} shellenv)"
fi

ZSH_CACHE_DIR=${HOME}/.oh-my-zsh-cache
if [[ ! -d ${ZSH_CACHE_DIR} ]]; then
    mkdir "${ZSH_CACHE_DIR}"
fi

source "${ZSH}/oh-my-zsh.sh"
