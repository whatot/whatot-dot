#!/usr/bin/env bash
# Bootstrap a new Python virtualenv. Does the following:
#
#   * Create a new virtualenv (named as the current directory by default)
#   * Create .python-version if it doesn't exist
#   * Install common dev packages
#   * Install dev-requirements.txt, if it exists
#
# Examples:
#   mkvenv
#   mkvenv name-of-env
#   mkvenv my-3.7-env 3.7.2
#   mkvenv my-2.7-env 2.7.15

set -e

current_dir=${PWD##*/}
# If name is passed as first argument, use that, otherwise use the current dirname
name=${1:-$current_dir}
# If python version is passed as second argument, use that, otherwise use 3.8
python_version=${2:-3.12.2}
common_packages=("ipython" "ipdb" "ped")

bold_name="\e[1m$name\e[m"
bold_python="\e[1m$python_version\e[m"
printf "Creating a Python $bold_python environment called $bold_name...\n"

# Ask for confirmation (https://stackoverflow.com/a/1885534/1157536)
read -p "Proceed? (y|n) " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    [[ "$0" = "$BASH_SOURCE" ]] && exit 1 || return 1 # handle exits from shell or function but don't exit interactive shell
fi

pyenv virtualenv $python_version $name
# Create .python-version if it doesn't exist
if [[ ! -f .python-version ]]; then
    printf "Creating \e[1m.python-version\e[m...\n"
    echo "$name" > .python-version
    # Include all global versions, for tox
    echo "$(pyenv global | grep -v system)" >> .python-version
else
    printf ".python-version already exists..."
fi
# Upgrade pip
printf "Upgrading \e[1mpip\e[m...\n"
pip install -U pip
# Install common dev packages
printf "Installing common dev packages: \e[1m${common_packages[*]}\e[m\n"
pip install ${common_packages[*]}

if [[ -f pyproject.toml ]]; then
    printf "Found \e[1mpyproject.toml\e[m...\n"
    read -p "pip install -e .[dev]? (y|n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        pip install -e '.[dev]'
    else
        printf "Skipping package installation...\n"
    fi
fi

if [[ -f ".pre-commit-config.yml" ]]; then
    printf "Found \e[1m.pre-commit-config.yml\e[m. Installing pre-commit hooks\n"
    pre-commit install
fi

printf "\e[1mDone!\e[m ðŸŽ‰\n"
